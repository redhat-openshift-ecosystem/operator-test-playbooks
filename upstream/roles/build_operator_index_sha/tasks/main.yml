- name: "Setting empty bundles array"
  set_fact:
    bob_bundles_sha_arr: []
    sis_bundles: []
    sis_opm_extra_args: ""
    sis_package_name_regex: "^(.*)/{{ sis_package_name }}:(.*)$"


- name: "Export list of packages"
  include_role:
    name: export_list_of_packages_from_index
  vars:
    bundle_index_image_input: "{{ sis_index_image_input }}"
  when: not sis_export_skip|bool

- name: "Filter operator bundles only"
  set_fact:
    elopfi_index_bundles_op: "{{ elopfi_index_bundles | select('match', sis_package_name_regex ) | list }}"

- name: "Filling shas bundles for '{{ sis_package_name }}'"
  include_tasks: bundle_sha.yml
  with_items: "{{ elopfi_index_bundles_op }}"

- name: "Print list of bundles using shas"
  debug:
    var: bob_bundles_sha_arr

- name: "Setting bundle image names index add mode"
  set_fact:
    bundle_sha_images: "{{ bob_bundles_sha_arr | join(',') }}"

- name: "Pull index image '{{ sis_index_image_output }}' (before removal of '{{ sis_package_name }}' operator)"
  shell: "{{ container_tool }} pull {{ sis_index_image_output }}"
  register: sis_pull_result
  failed_when: false

- name: "Setting bundle image names index add mode"
  set_fact:
    sis_opm_extra_args: "--from-index {{ sis_index_image_output }}"
  when: sis_pull_result.rc == 0

- name: "Setting 'index export' container option"
  set_fact:
    boi_index_args: "-c {{ opm_container_tool_index }}"
  when:
    - opm_container_tool_index is defined
    - opm_container_tool_index|length > 0

- name: "Remove operator from idnex"
  block:
    - name: "Remove previous versions of '{{ sis_package_name }}' operator from index image {{ sis_index_image_output }}"
      shell: "{{ opm_bin_path }} index rm {{ boi_index_args }} --operators {{ sis_package_name }} --tag {{ sis_index_image_output }} {{ sis_opm_extra_args }}"
      register: sis_index_rm_rc

    - name: "Push index image {{ sis_index_image_output }}"
      include_role:
        name: operator_push_image
      vars:
        fqp_image: "{{ sis_index_image_output }}"
      when: sis_index_rm_rc.rc == 0

    - name: "Set 'result_rc' to false"
      set_fact:
        result_rc: false

    - name: "Set 'result_rc'"
      set_fact:
        result_rc: true
      when: ((sis_index_rm_rc.rc is defined and sis_index_rm_rc.rc == 0) and rc_last|bool)

    - name: "Prints message that bundles were removed from catalog"
      debug:
        msg: "Operator '{{ sis_package_name }}' were removed and push to catalog '{{ sis_index_image_output }}' : [OK]"
      when:
        - result_rc|bool

    - name: "Print failing msg that bundle was not removed to catalog or not pushed"
      debug:
        msg: "Operator '{{ sis_package_name }}' was not removed or there was problem to push to catalog '{{ sis_index_image_output }}' : [FAIL]"
      when:
        - not result_rc|bool
        - (strict_mode is undefined or not strict_mode|bool)

    - name: "Failing when bundle was not removed to catalog or not pushed"
      fail:
        msg: "Operator '{{ sis_package_name }}' was not removed or there was problem to push to catalog '{{ sis_index_image_output }}' : : [FAIL]"
      when:
        - not result_rc|bool
        - strict_mode is defined
        - strict_mode|bool
  when:
    - sis_opm_extra_args is defined
    - sis_opm_extra_args|length > 0
    - not sis_index_rm_skip|bool


- name: "Add operator to idnex"
  block:
    - name: "Add '{{ sis_package_name }}' operator to index image {{ sis_index_image_output }}"
      shell: "{{ opm_bin_path }} index add -u {{ opm_container_tool }} --bundles {{ bundle_sha_images }} --tag {{ sis_index_image_output }} --mode {{ opm_index_add_mode }} {{ sis_opm_extra_args }}"
      ignore_errors: true
      register: sis_ia_rc
      when: bundle_sha_images|length > 0

    - name: "Index safety check to avoid accidental overwrite"
      include_role:
        name: export_list_of_packages_from_index
      vars:
        sis_index_image_output_input: "{{ sis_index_image_output }}"
        index_pull_skip: true
      when: min_operators_in_index_allowed is defined

    - name: "Push index image '{{ sis_index_image_output }}'"
      include_role:
        name: operator_push_image
      vars:
        fqp_image: "{{ sis_index_image_output }}"
      when: sis_ia_rc.rc == 0

    - name: "Set 'result_rc' to false"
      set_fact:
        result_rc: false

    - name: "Set 'result_rc'"
      set_fact:
        result_rc: true
      when:
        - sis_ia_rc.rc is defined
        - sis_ia_rc.rc == 0
        - rc_last|bool

    - name: "Prints message that bundles were added to catalog"
      debug:
        msg: "Bundles '{{ bundle_sha_images }}'' were added and push to catalog '{{ sis_index_image_output }}' using mode '{{ opm_index_add_mode }}' : [OK]"
      when:
        - result_rc|bool

    - name: "Print failing msg that bundle was not added to catalog or not pushed"
      debug:
        msg: "Bundle '{{ bundle_sha_images }}'' was not added or not pushed to '{{ sis_index_image_output }}' using mode '{{ opm_index_add_mode }}' : [FAIL]"
      when:
        - not result_rc|bool
        - (strict_mode is undefined or not strict_mode|bool)

    - name: "Failing when bundle was not added to catalog or not pushed"
      fail:
        msg: "Bundle '{{ bundle_sha_images }}'' was not added or not pushed to '{{ sis_index_image_output }}' using mode '{{ opm_index_add_mode }}' : [FAIL]"
      when:
        - not result_rc|bool
        - strict_mode is defined
        - strict_mode|bool

    - name: "Cleanup local images"
      shell: "{{ opm_container_tool }} rmi -f {{ image_item }}"
      failed_when: false
      loop: "{{ elopfi_index_bundles_op }}"
      loop_control:
        loop_var: image_item
  when:
    - ((sis_opm_extra_args is defined and sis_opm_extra_args|length > 0) or (sis_allow_empty_index is defined and sis_allow_empty_index|bool))
    - not sis_index_add_skip|bool
