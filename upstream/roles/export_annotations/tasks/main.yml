---
- name: "Read the variables from annotations.yaml"
  block:
    - name: "Check if annotation file exists"
      stat:
        path: "{{ annotation_file_path }}"
      register: annotation_file_st

    - name: "Fail if annotation file doesn't exists"
      fail:
      when: not annotation_file_st.stat.exists

    - name: "Getting content of annotation.yaml file"
      shell: "cat {{ annotation_file_path }}"
      register: annotation_data

    - name: "Sets `annotations_vars` from yaml file"
      set_fact:
        annotations_vars: "{{ annotation_data.stdout | from_yaml }}"

    - name: "Verify required annotation(s)"
      block:
        - name: "Reset 'df_failed_annotations_keys'"
          set_fact:
            df_failed_annotations_keys: ""
        - name: "If the required keys is not found among the image labels, add it to the failed_labels"
          set_fact:
            df_failed_annotations_keys: "{{ df_failed_annotations_keys }} {{ item }}"
          when: item not in annotations_vars.annotations
          loop: "{{ required_annotations }}"
        - name: "Fail if any of the required operator annotation(s) are not found"
          fail:
            msg: "Required operator bundle annotation(s) not found: {{ df_failed_annotations_keys }}"
          when: df_failed_annotations_keys|length > 0
      when: run_upstream|bool

    # - name: "Set operators variables from annotation file"
    #   set_fact:
    #     operator_channels: "{{ annotations_vars.annotations['operators.operatorframework.io.bundle.channels.v1'] }}"
    #     operator_manifest_dir: "{{ annotations_vars.annotations['operators.operatorframework.io.bundle.manifests.v1'] }}"
    #     operator_metadata_dir: "{{ annotations_vars.annotations['operators.operatorframework.io.bundle.metadata.v1'] }}"
    #     operator_package_name: "{{ annotations_vars.annotations['operators.operatorframework.io.bundle.package.v1'] }}"
    # - name: "Failing when package name '{{ operator_package_name }}' is not same as operator dir name '{{ operator_dir_name }}'"
    #   fail:
    #     msg: "Package name from '{{ annotation_file_path }}' is '{{ operator_package_name }}' and it is not same as operator dir '{{ operator_dir_name }}' !!!"
    #   when:
    #     - operator_package_name != operator_dir_name
  when: operator_format == "bundle"
