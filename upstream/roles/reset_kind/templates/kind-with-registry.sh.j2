#!/bin/sh
set -o errexit

KIND_CMD=${1-{{ kind_bin_path }}}
CONTAINER_CMD="{{ container_tool }}"
CERTS_DIR=${CERTS_DIR-"$HOME/.optest/certs"}
CERT_EXPIRED_IN=${CERT_EXPIRED_IN-86400}
echo "$KIND_CMD --version"
$KIND_CMD --version

# create registry container unless it already exists
reg_name='kind-registry'
reg_port='5000'

# Remove existing registry
$CONTAINER_CMD rm -f "${reg_name}" || true

{% if kind_registry_ssl|bool == false %}
$CONTAINER_CMD run \
    -d --restart=always -p ${reg_port}:5000 --name "${reg_name}" \
    registry:2
{% else %}

# [ -d $CERTS_DIR ] && rm -rf $CERTS_DIR || true

# check if certificate will expire in 1 day
if [ ! -f $CERTS_DIR/domain.crt ] || [ ! openssl x509 -checkend $CERT_EXPIRED_IN -noout -in $CERTS_DIR/domain.crt > /dev/null 2>&1 ];then

  rm -rf $CERTS_DIR > /dev/null 2>&1 || true
  mkdir -p $CERTS_DIR

  openssl req -newkey rsa:4096 -nodes -sha256 -keyout $CERTS_DIR/domain.key -x509 -days 365 -subj '/CN=${reg_name}' -addext "subjectAltName=DNS:${reg_name},DNS:localhost,DNS:host.containers.internal" -out $CERTS_DIR/domain.crt -batch
  cd $CERTS_DIR
  ln -snf domain.crt ca.crt
  cd -

{% if ansible_facts['os_family'] == "Debian" %}
  # For ubuntu
  sudo cp -f $CERTS_DIR/domain.crt /etc/ssl/certs/
  sudo update-ca-certificates --fresh
{% elif ansible_facts['os_family'] == "RedHat" %}
  # For redhat family
  sudo cp $CERTS_DIR/domain.crt /etc/pki/ca-trust/source/anchors/
  sudo update-ca-trust
{% else %}
  echo "Error: Unsuported version for handling certificates for registry !!!"
  exit 1
{% endif %}

fi

$CONTAINER_CMD run -d \
   --restart=always \
   --name "${reg_name}" \
   -v $CERTS_DIR:/certs:Z \
   -e REGISTRY_HTTP_ADDR=0.0.0.0:${reg_port} \
   -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
   -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
   -p ${reg_port}:5000 \
   registry:2
#if [[ $(id -u) -eq 0 ]];then
sudo sh -c "sed -i 's/^127.0.0.1.*/127.0.0.1 localhost kind-registry/g' /etc/hosts"
#fi
{% endif %}

# Remove existing cluster if it exists
if [ -n "$($KIND_CMD get clusters | grep {{ kind_cluster_name }})" ];then
  $KIND_CMD delete cluster --name {{ kind_cluster_name }}
fi

# create a cluster with the local registry enabled in containerd
{% if kind_kube_version|length == 0 %}
cat <<EOF | $KIND_CMD create cluster --name {{ kind_cluster_name }} --config=-
{% else %}
cat <<EOF | $KIND_CMD create cluster --name {{ kind_cluster_name }} --image kindest/node:{{ kind_kube_version }} --config=-
{% endif %}

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:${reg_port}"]
{% if ansible_facts['os_family'] == "Debian" %}
{% if kind_registry_ssl|bool == false %}
    endpoint = ["http://${reg_name}:${reg_port}"]
{% else %}
    endpoint = ["https://${reg_name}:${reg_port}"]
{% endif %}
{% elif ansible_facts['os_family'] == "RedHat" %}
{% if kind_registry_ssl|bool == false %}
    endpoint = ["http://host.containers.internal:${reg_port}"]
{% else %}
    endpoint = ["https://host.containers.internal:${reg_port}"]
{% endif %}
{% endif %}
EOF

# connect the registry to the cluster network
$CONTAINER_CMD network connect "kind" "${reg_name}"

for node in $(kind get nodes --name {{ kind_cluster_name }}); do
  $CONTAINER_CMD cp $CERTS_DIR/domain.crt ${node}:/usr/local/share/ca-certificates/ca.crt
  $CONTAINER_CMD exec ${node} update-ca-certificates --fresh
  $CONTAINER_CMD exec ${node} systemctl restart containerd
done

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-registry-hosting
  namespace: kube-public
data:
  localRegistryHosting.v1: |
    host: "localhost:${reg_port}"
    help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
EOF