---
- name: "Set bmi_rc to false"
  set_fact:
    bmi_rc: false

- name: "Delete directory for index extraction"
  file:
    path: "{{ bmi_extracted_index_location }}"
    state: absent

- name: "Prepare directory"
  file:
    path: "{{ bmi_extracted_index_location }}"
    state: directory

- name: "Set sql variables"
  set_fact:
    bmi_source_index_tree_location: "database/index.db"
  when:
    - bmi_input_image_format == "sql"

- name: "Set fbc variables"
  set_fact:
    bmi_source_index_tree_location: "configs"
  when:
    - bmi_input_image_format == "fbc"

- name: "Set sql variables"
  set_fact:
    bmi_fbc_config_path: "{{ bmi_extracted_index_location }}/index"
  when:
    - bmi_output_image_format == "sql"

- name: "Set sql variables"
  set_fact:
    bmi_fbc_config_path: "{{ bmi_extracted_index_location }}/configs"
  when:
    - bmi_output_image_format == "fbc"

- name: "Create configs directory"
  file:
    path: "{{ bmi_extracted_index_location }}/configs"
    state: directory
  when:
    - bmi_output_image_format == "fbc"

- name: "Activate rendering"
  set_fact:
    bmi_render_from: "index"
  when:
    - bmi_input_image_format == "sql"
    - bmi_output_image_format == "fbc"
    - bmi_render_from is not defined or bmi_render_from|length == 0

- name: "Fail when asked to convert fbc to sql"
  fail:
    msg: "Conversion from FBC format to SQL is not allowed"
  when:
    - bmi_input_image_format == "fbc"
    - bmi_output_image_format == "sql"

- name: "Delete {{ pfbc_extracted_fbc_location }} content"
  file:
    state: absent
    path: "{{ pfbc_extracted_fbc_location }}"

- name: "Extract content from the index"
  include_role:
    name: extract_files_from_image
  vars:
    effi_image: "{{ bmi_input_image }}"
    effi_copy_source_path: "{{ bmi_source_index_tree_location }}"
    effi_target_copy_path: "{{ bmi_extracted_index_location }}"
    effi_image_format: "{{ bmi_input_image_format }}"
  when:
    - pfbc_index_update|bool
    - bmi_render_from|length==0

- name: "Render index from bundles"
  include_role:
    name: render_files
  vars:
    rf_render_output_dir: "{{ bmi_extracted_index_location }}"
    rf_render_output_root: "{{ bmi_source_index_tree_location }}"
    rf_render_from: "{{ bmi_render_from }}"
  loop: "{{ bmi_bundles_to_process | list }}"
  loop_control:
    loop_var: rf_render_target
  when: bmi_render_from == "bundle"

- name: "Render index from index"
  include_role:
    name: render_files
  vars:
    rf_render_output_dir: "{{ bmi_extracted_index_location }}"
    rf_render_output_root: "{{ bmi_source_index_tree_location }}"
    rf_render_target: "{{ bmi_input_image }}"
    rf_render_from: "{{ bmi_render_from }}"
  loop_control:
    loop_var: rf_render_target
  when: bmi_render_from == "index"

- name: "Set Dockerfile path to {{ bmi_fbc_config_path }}.Dockerfile"
  set_fact:
    bmi_dockerfile_path: "{{ bmi_fbc_config_path }}.Dockerfile"

- name: "Delete Dockerfile"
  file:
    path: "{{ bmi_dockerfile_path }}"
    state: absent

- name: "Create FBC Dockerfile"
  shell: "cd {{ bmi_extracted_index_location }}; {{ opm_bin_path }} alpha generate dockerfile {{ bmi_fbc_config_path }}"
  register: bmi_rc
  when:
    - bmi_output_image_format == "fbc"

- name: "Create SQL Dockerfile"
  template:
    src: "dockerfile.js2"
    dest: "{{ bmi_dockerfile_path }}"
  register: bmi_rc2
  when:
    - bmi_output_image_format == "sql"

- name: "Tweak Dockerfile to accept arch args part 1"
  lineinfile:
    path: "{{ bmi_dockerfile_path }}"
    insertbefore: BOF
    line: "ARG ARCH="

- name: "Tweak Dockerfile to accept arch args part 2"
  replace:
    path: "{{ bmi_dockerfile_path }}"
    regexp: "FROM quay.io/operator-framework/opm:latest"
    replace: "FROM quay.io/operator-framework/opm:{{ opm_version }}-${ARCH}"

- name: "Show Dockerfile"
  shell: "cat {{ bmi_dockerfile_path }}"

- name: "Set bmi_container_tool_pre_command"
  set_fact:
    bmi_container_tool_pre_command: "{{ bmi_docker_experimental }}"
  when:
    - container_tool == "docker"

- name: "Detect needed architectures from image '{{ bmi_base_image }}'"
  shell: "{{ bmi_container_tool_pre_command }} {{ container_tool }} manifest inspect {{ bmi_base_image }} | {{ jq_bin_path }} '.manifests[].platform.architecture' -r"
  register: bmi_archs_inspect_result
  when:
    - bmi_hardcoded_architectures is undefined or bmi_hardcoded_architectures|length == 0

- name: "Show bmi_archs_inspect_result.stdout_lines"
  debug:
    var: bmi_archs_inspect_result.stdout_lines

- name: "Convert hardcoded archs to a list"
  set_fact:
    bmi_hardcoded_architectures_list: "{{ bmi_hardcoded_architectures.split(,)|list }}"
  when:
    - bmi_hardcoded_architectures|length != 0

- name: "Convert detected archs to a list"
  set_fact:
    bmi_archs_inspect_list: "{{ bmi_archs_inspect_result.stdout_lines|list }}"

- name: "Find difference between harcoded needed architectures and available"
  set_fact:
    bmi_archs_not_available: "{{ bmi_hardcoded_architectures_list | reject('in', bmi_archs_inspect_list) }}"
  when:
    - bmi_hardcoded_architectures|length != 0

- name: "Failing as some architectures are not available"
  fail:
    msg: "Cannot produce {{ bmi_archs_not_available | join(',') }} architecture(s)."
  when:
    - bmi_archs_not_available is defined
    - bmi_archs_not_available|length != 0

- name: "Set bmi_architectures if not hardcoded"
  set_fact:
    bmi_architectures: "{{ bmi_archs_inspect_list }}"
  when:
    - bmi_hardcoded_architectures is undefined or bmi_hardcoded_architectures|length == 0

- name: "Set bmi_architectures if hardcoded"
  set_fact:
    bmi_architectures: "{{ bmi_hardcoded_architectures }}"
  when:
    - bmi_archs_not_available is defined
    - bmi_hardcoded_architectures|length != 0

- name: "Print archs list'"
  debug:
    var: bmi_architectures

- name: "Print bmi_output_image"
  debug:
    var: bmi_output_image

- name: "Remove manifest '{{ bmi_output_image }}' before creating a new one"
  shell: "{{ container_tool }} rmi -f {{ bmi_output_image }}"
  failed_when: false

- name: "Create the final manifest"
  shell: "{{ container_tool }} manifest create {{ bmi_output_image }}"
  when:
    - container_tool == "podman"

- name: "Prepare var for docker manifest command"
  set_fact:
    bmi_sub_images: ""

- name: "Create and push archs one by one"
  include_tasks: process_archs.yml
  loop: "{{ bmi_architectures }}"
  loop_control:
    loop_var: bmi_architecture

- name: "Create the final manifest"
  shell: "{{ bmi_container_tool_pre_command }} {{ container_tool }} manifest create {{ bmi_output_image }} {{ bmi_sub_images }}"
  when:
    - container_tool == "docker"

- name: "Docker push tmp manifest '{{ bmi_output_image }}{{ bmi_tmp_postfix }}'"
  shell: "{{ container_tool }} manifest push {{ bmi_output_image }}{{ bmi_tmp_postfix }}"
  register: bmi_rc
  when:
    - container_tool is defined
    - container_tool == 'docker'

- name: "Podman push tmp manifest '{{ bmi_output_image }}{{ bmi_tmp_postfix }}'"
  shell: "{{ container_tool }} manifest push {{ bmi_output_image }} {{ image_protocol }}{{ bmi_output_image }}{{ bmi_tmp_postfix }}"
  register: bmi_rc
  when:
    - container_tool is defined
    - container_tool == 'podman'

- name: "Skopeo copy final manifest '{{ bmi_output_image }}"
  shell: "skopeo copy -a {{ image_protocol }}{{ bmi_output_image }}{{ bmi_tmp_postfix }} {{ image_protocol }}{{ bmi_output_image }} --src-tls-verify=false -f v2s2"
  register: bmi_rc
