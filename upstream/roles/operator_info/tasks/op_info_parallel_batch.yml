---

- name: "List of operators in current batch"
  debug:
    var: op_info_batch_items

- name: "Run single operator"
  command:
    cmd: "ansible-playbook -i localhost, upstream/local.yml --tags operator_info -e ansible_connection=local -e work_dir={{ work_dir }} -e run_upstream={{ run_upstream }} -e run_prepare_catalog_repo_upstream=false -e operator_base_dir={{ operator_base_dir }} -e operators={{ item  }} -e cluster_type={{ cluster_type }} -e automatic_cluster_version_label={{ automatic_cluster_version_label }} -e strict_cluster_version_labels={{ strict_cluster_version_labels }} -e stream_kind={{ stream_kind }} -e production_registry_namespace={{ production_registry_namespace }} -e operator_bundle_src_dir={{ work_dir }}/op_info/{{ item }}/operators -e operator_info_output_file={{ work_dir }}/op_info/{{ item }}/operators/op_info.yaml -e run_remove_operator_bundle_src_dir=false"
    chdir: "{{ lookup('env', 'PWD') }}"
  async: 100000
  poll: 0
  register: result
  with_items: "{{ op_info_batch_items }}"

- name: "Check sync status"
  async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ result.results }}"
  loop_control:
    loop_var: "async_result_item"
  register: async_poll_results
  until: async_poll_results.finished
  retries: 10000
  ignore_errors: true

- name: "Getting all operators"
  ansible.builtin.set_fact:
    op_info_ok: "{{ op_info_ok | default([]) +  [ op_item.async_result_item.item ] }}"
  loop: "{{ async_poll_results.results }}"
  loop_control:
    loop_var: "op_item"
  when: op_item.rc == 0

- name: "Getting all operators failed"
  ansible.builtin.set_fact:
    op_info_failed: "{{ op_info_failed | default([]) +  [ op_item.async_result_item.item ] }}"
  loop: "{{ async_poll_results.results }}"
  loop_control:
    loop_var: "op_item"
  when: op_item.rc > 0
