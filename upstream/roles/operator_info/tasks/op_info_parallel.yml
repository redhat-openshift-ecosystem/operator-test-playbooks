---
- name: "Operators in parallel 'n={{ op_info_parallel_batch }}'"
  include_tasks: op_info_parallel_batch.yml
  loop: "{{ operators.split(',') | batch(op_info_parallel_batch | int) | list }}"
  loop_control:
    loop_var: op_info_batch_items

- name: "Print 'op_info_ok'"
  debug:
    var: op_info_ok

- name: "Print 'op_info_failed'"
  debug:
    var: op_info_failed

- name: "Faile if op_info_failed is nonepmpty"
  ansible.builtin.fail:
    msg: "Some operators failed {{ op_info_failed | join(',') }}"
  when: op_info_failed.0 is defined

- name: "Ensure that the '{{ operator_info_output_file }}' is empty"
  file:
    state: absent
    path: "{{ operator_info_output_file }}"

- name: "Ensure that the '{{ work_dir }}/operators/' is empty"
  file:
    state: absent
    path: "{{ work_dir }}/operators/"

- name: "Adding single op_info to final file '{{ operator_info_output_file }}'"
  ansible.builtin.shell: "cat {{ work_dir }}/op_info/{{ op_item }}/operators/op_info.yaml >> {{ operator_info_output_file }}"
  loop: "{{ op_info_ok }}"
  loop_control:
    loop_var: "op_item"
  when: op_info_ok is defined

- name: "Adding single op_info to final file '{{ operator_info_output_file }}'"
  ansible.builtin.copy:
    src: "{{ work_dir }}/op_info/{{ op_item }}/operators/{{ op_item }}"
    dest: "{{ work_dir }}/operators/"
    remote_src: true
  loop: "{{ op_info_ok }}"
  loop_control:
    loop_var: "op_item"
  when: op_info_ok is defined

- name: "Getting content from '{{ operator_info_output_file }}'"
  shell: "cat {{ operator_info_output_file }}"
  register: operator_info_data
  ignore_errors: true

- name: "Sets operator info variables from '{{ operator_info_output_file }}'"
  set_fact:
    op_info: "{{ operator_info_data.stdout | from_yaml }}"
  when: operator_info_data.rc == 0
