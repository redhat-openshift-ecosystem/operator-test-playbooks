---
- name: "Resetting 'operator' values"
  set_fact:
    oi_operator_format: ""
    annotations_vars: ""
    op_manifest_pkg_vars: ""
    io_versions_replaces: {}

- name: "Search for all versions for operator '{{ operator_base_dir | basename }}'"
  find:
    paths: "{{ operator_base_dir }}/{{ oi_operator_name }}"
    recurse: false
    file_type: directory
  register: oi_versions_find

- name: "Setting list of versions from directory structre"
  set_fact:
    oi_versions_in_dir: "{{ oi_versions_find.files | map(attribute='path' ) | map('basename') | list | sort_versions }}"

- name: "Search for annotations.yml"
  find:
    paths: "{{ operator_base_dir }}/{{ oi_operator_name }}/{{ oi_versions_in_dir[0] }}/metadata"
    patterns: "annotations.yaml"
  register: annotations_presence

- name: "Set operator_format to package manifest or bundle"
  set_fact:
    oi_operator_format: "{{ 'bundle' if annotations_presence.files else 'manifest' }}"

- name: "Export Package variables"
  include_role:
    name: export_manifest_package_info
  vars:
    op_dir: "{{ operator_base_dir }}/{{ oi_operator_name }}"
  when: oi_operator_format == "manifest"

- name: "Loop over all versions"
  include_tasks: op_ver_info.yml
  loop: "{{ oi_versions_in_dir }}"
  loop_control:
    loop_var: oi_operator_ver

- name: "Print 'op_manifest_pkg_vars'"
  debug:
    var: op_manifest_pkg_vars

- name: "Print 'io_versions_replaces'"
  debug:
    var: io_versions_replaces

- name: "Adding current operator to the 'op_info'"
  set_fact:
    op_info: "{{ op_info | default([]) | union( [{'name': oi_operator_name, 'format': oi_operator_format, 'versions': oi_versions_in_dir, 'replaces': io_versions_replaces }]) }}"
    # op_info: "{{ op_info | default([]) | union( [{'name': oi_operator_name, 'versions': oi_versions_in_dir, 'versions_prod': oi_versions_in_dir, 'bundles': oi_versions_in_dir }]) }}"
  when: oi_versions_in_dir.0 is defined

# - name: "Pause"
#   pause:
