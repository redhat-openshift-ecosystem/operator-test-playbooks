---
- name: "Check operator external image availability"
  include_role:
    name: check_image_availability

- name: "Set defaults"
  set_fact:
    quay_release: "0.0.1"
    upstream_namespace_param: ""
    olm_operator_files_path: /tmp/operator-test/olm-operator-files
    prow_summary: []

- name: "Set custom namespace command"
  set_fact:
    upstream_namespace_param: "-n {{ operator_suggested_namespace }}"
  when:
    - run_upstream|bool
    - operator_suggested_namespace|length > 0

- name: "Set custom namespace command"
  set_fact:
    upstream_namespace_param: "-n {{ operator_suggested_namespace_default }}"
  when:
    - run_upstream|bool
    - operator_suggested_namespace|length == 0

- name: "Create the olm operator files directory"
  file:
    path: "{{ olm_operator_files_path }}"
    state: directory
    mode: '0755'

- name: "Copy namespace file"
  template:
    src: "namespace.yml.js2"
    dest: "{{ olm_operator_files_path }}/namespace.yml"

- name: "Create the namespace"
  shell: "{{ oc_bin_path }} apply -f {{ olm_operator_files_path }}/namespace.yml"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Process the operatorgroup template"
  template:
    src: "{{ 'operatorgroup_upstream.yml.j2' if run_upstream else \"operatorgroup.yml.j2\" }}"
    dest: "{{ olm_operator_files_path }}/operatorgroup.processed.yml"

- name: "Process the subscription template"
  template:
    src: "{{ 'subscription_upstream.yml.j2' if run_upstream else \"subscription.yml.j2\" }}"
    dest: "{{ olm_operator_files_path }}/subscription.yml"

- name: "Process the catalogsource template"
  template:
    src: "catalogsource_upstream.yml.j2"
    dest: "{{ olm_operator_files_path }}/catalogsource.yml"

- name: "Process the catalogsource-prod template"
  template:
    src: "catalogsource_upstream_default.yml.j2"
    dest: "{{ olm_operator_files_path }}/catalogsource-prod.yml"

- name: "Create all processed resources in the deploy directory"
  shell: 'for f in $(find {{ olm_operator_files_path }} -maxdepth 1 -name "*processed.yml"); do {{ oc_bin_path }} apply -f $f; done'
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Create the catalogsource"
  shell: "{{ oc_bin_path }} apply -f {{ olm_operator_files_path }}/catalogsource.yml"

- name: "Create a catalogsource from production"
  shell: "{{ oc_bin_path }} apply -f {{ olm_operator_files_path }}/catalogsource-prod.yml"

- name: "Wait for the catalogsource pod to start up"
  shell: "{{ oc_bin_path }} get pods -n openshift-marketplace | grep {{ operator_suggested_namespace }}- | grep Running"
  register: operator_source_result
  retries: 60
  delay: 10
  until: operator_source_result.rc == 0
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: not run_upstream|bool

- name: "Report"
  include_role:
    name: deploy_olm_operator_openshift_upstream
    tasks_from: report.yml
  vars:
    dooou_text_variable: "Catalogsource startup                          "
    dooou_control_variable: "{{ operator_source_result.rc }}"
    dooou_control_variable_ok_value: "0"
  when: not run_upstream|bool

- name: "Wait for the operator {{ package_name }} to be in packagemanifests"
  shell: "{{ oc_bin_path }} get packagemanifests {{ package_name }} -n {{ operator_suggested_namespace }}"
  register: packagemanifest_presence
  retries: "{{ packagemanifest_retries }}"
  delay: "{{ packagemanifest_delay }}"
  until: packagemanifest_presence.rc == 0
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Report"
  include_role:
    name: deploy_olm_operator_openshift_upstream
    tasks_from: report.yml
  vars:
    dooou_text_variable: "Operator is in packagemanifests                "
    dooou_control_variable: "{{ packagemanifest_presence.rc }}"
    dooou_control_variable_ok_value: "0"

- name: "Create the subscription"
  shell: "{{ oc_bin_path }} apply -f {{ olm_operator_files_path }}/subscription.yml"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Wait for the operator {{ operator_pod_name }} pod to start up"
  shell: "{{ oc_bin_path }} get pods {{ upstream_namespace_param }}| grep {{ operator_pod_name }} | grep Running"
  register: operator_result
  retries: "{{ pod_start_retries }}"
  delay: "{{ pod_start_delay }}"
  until: operator_result.rc == 0
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Report"
  include_role:
    name: deploy_olm_operator_openshift_upstream
    tasks_from: report.yml
  vars:
    dooou_text_variable: "Operator started after subscribed to channel   "
    dooou_control_variable: "{{ operator_result.rc }}"
    dooou_control_variable_ok_value: "0"

- name: "Reset uptime test result"
  set_fact:
    operator_uptime_passed: false
    pod_stay_healthy_start: 1

- name: "Wait for the operator {{ operator_pod_name }} pod to stay healthy for a specific time (upstream only)"
  include_tasks: stay_healthy.yml
  loop: "{{ range(pod_stay_healthy_start, pod_stay_healthy_retries + 1)|list }}"
  when: operator_result.rc == 0

- name: "Report"
  include_role:
    name: deploy_olm_operator_openshift_upstream
    tasks_from: report.yml
  vars:
    dooou_text_variable: "Operator was able to stay healthy 1 min        "
    dooou_control_variable: "{{ operator_uptime_passed }}"
    dooou_control_variable_ok_value: true

- name: "Get the details of the deployed CSVs"
  shell: "{{ oc_bin_path }} describe csvs {{ upstream_namespace_param }}"
  register: csv_describe_result
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  no_log: true

- name: "Output the CSV description to a debug file"
  copy:
    content: "{{ csv_describe_result.stdout }}"
    dest: "{{ work_dir }}/olm-operator-csv-debug.txt"
  when: csv_describe_result.stdout|length > 0
  no_log: true

- name: "Prints operator results rc"
  debug:
    var: operator_result.rc

- name: "Prints operator results raw rc"
  debug:
    var: operator_uptime_raw_rc

- name: "Print CSV in case of an error"
  debug:
    var: csv_describe_result.stdout
  when:
    - csv_describe_result.stdout|length > 0
    - operator_result.rc != 0 or operator_uptime_raw_rc|int != 0 or operator_uptime_raw_rc is not defined

- name: "Get the pod status of the deployed operator"
  shell: "{{ oc_bin_path }} get --output=name pods {{ upstream_namespace_param }}| grep {{ operator_pod_name }} | cut -f1 | xargs -I{} {{ oc_bin_path }} get {} {{ upstream_namespace_param }} -o yaml | {{ yq_bin_path }} r - \"status\""
  register: operator_pod_result
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: csv_describe_result.stdout|length > 0
  no_log: true

- name: "Output the operator pod log to a debug file"
  copy:
    content: "{{ operator_pod_result.stdout }}"
    dest: "{{ work_dir }}/olm-operator-pod-debug.txt"
  when:
    - csv_describe_result.stdout|length > 0
    - operator_pod_result.stdout|length > 0
  no_log: true

- name: "Print operator pod log in case of an error"
  debug:
    var: operator_pod_result.stdout
  when:
    - csv_describe_result.stdout|length > 0
    - operator_pod_result.stdout|length > 0
    - operator_result.rc != 0 or operator_uptime_raw_rc|int != 0 or operator_uptime_raw_rc is not defined

- name: "Get the pod container logs of the deployed operator"
  shell: "{{ oc_bin_path }} get --output=name pods {{ upstream_namespace_param }}| grep {{ operator_pod_name }} | cut -d' ' -f1 | xargs -I{} {{ oc_bin_path }} logs {} -c {{ operator_container_name }} {{ upstream_namespace_param }}"
  register: operator_container_result
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: csv_describe_result.stdout|length > 0
  no_log: true

- name: "Output the operator container log to a debug file"
  copy:
    content: "{{ operator_container_result.stdout }}"
    dest: "{{ work_dir }}/olm-operator-container-debug.txt"
  when:
    - csv_describe_result.stdout|length > 0
    - operator_container_result.stdout|length > 0
  no_log: true

- name: "Print operator container log in case of an error"
  debug:
    var: operator_container_result.stdout
  when:
    - csv_describe_result.stdout|length > 0
    - operator_container_result.stdout|length > 0
    - operator_result.rc != 0 or operator_uptime_raw_rc|int != 0 or operator_uptime_raw_rc is not defined

- name: "Get the catalogsource pod log (upstream)"
  shell: "{{ oc_bin_path }} get --output=name pods {{ upstream_namespace_param }} | grep test-operators-ocs | cut -d' ' -f1 | xargs -I{} {{ oc_bin_path }} logs {} {{ upstream_namespace_param }}"
  register: catalog_source_result
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: run_upstream|bool
  no_log: true

- name: "Output the catalogsource log to a debug file"
  copy:
    content: "{{ catalog_source_result.stdout }}"
    dest: "{{ work_dir }}/olm-catalog-source-debug.txt"
  when: catalog_source_result.stdout is defined
  no_log: true

- name: "Print catalogsource pod log (upstream) in case of an error"
  debug:
    var: catalog_source_result.stdout
  when:
    - catalog_source_result.stdout is defined
    - operator_result.rc != 0 or operator_uptime_raw_rc|int != 0 or operator_uptime_raw_rc is not defined

- name: "Get the catalog-operator pod log (upstream)"
  shell: "{{ oc_bin_path }} get --output=name pods -n olm | grep catalog-operator | cut -d' ' -f1 | xargs -I{} {{ oc_bin_path }} logs {} -n olm | tail -n 100"
  register: catalog_operator_result
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: run_upstream|bool
  no_log: true

- name: "Output the catalog-operator log to a debug file"
  copy:
    content: "{{ catalog_operator_result.stdout }}"
    dest: "{{ work_dir }}/olm-catalog-operator-debug.txt"
  when: catalog_operator_result.stdout is defined
  no_log: true

- name: "Print catalog-operator log in case of an error"
  debug:
    var: catalog_operator_result.stdout
  when:
    - catalog_operator_result.stdout is defined
    - operator_result.rc != 0 or operator_uptime_raw_rc|int != 0 or operator_uptime_raw_rc is not defined

- name: "Get the InstallPlan debug output"
  shell: "{{ oc_bin_path }} describe installplan -n {{ openshift_namespace }}"
  register: installplan_result
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  no_log: true

- name: "Get the InstallPlan debug output"
  shell: "{{ oc_bin_path }} describe installplan {{ upstream_namespace_param }}"
  register: installplan_result
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  no_log: true

- name: "Output the InstallPlan debug output to a debug file"
  copy:
    content: "{{ installplan_result.stdout }}"
    dest: "{{ work_dir }}/olm-installplan-debug.txt"
  when: installplan_result.stdout is defined
  no_log: true

- name: "Print catalog-operator log in case of an error"
  debug:
    var: installplan_result.stdout
  when:
    - installplan_result.stdout is defined
    - operator_result.rc != 0 or operator_uptime_raw_rc|int != 0 or operator_uptime_raw_rc is not defined

- name: "Get namespace state"
  shell: "{{ oc_bin_path }} get pods {{ upstream_namespace_param }}"
  register: dooub_namespace_state
  ignore_errors: true
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: "Print namespace state"
  debug:
    var: dooub_namespace_state.stdout
  when:
    - operator_result.rc != 0 or operator_uptime_raw_rc|int != 0 or operator_uptime_raw_rc is not defined

- name: "Report the most common failure"
  debug:
    msg: |
      -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
      Operator is unable to start.
      We were unable to 'grep Running' the operator from 'kubectl get pods' in related namespace.
      See 'pod to start up' step above.
      Also check, that the operator is not listed in running containers in the namespace 'Print namespace state' step.
      In some cases step 'Print catalog-operator log in case of an error' can be helpful. If installation was finished.
      You can find that 'Print catalog-operator log in case of an error' shows interrupted 'Installing'. Then you can request
      more time for installation - maintainers will set 'allow/longer-deployment' label.
      Also check other debug outputs.
      -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  when:
   - operator_result.rc is defined
   - operator_result.rc != 0

- name: "Report a brief installation summary"
  debug:
    var: prow_summary

- name: "Fail when operator is failing to deploy on kind cluster"
  block:

    - name: "Operator error status among packagemanifests"
      fail:
        msg: 'Operator was not found among packagemanifests'
      when:
        - packagemanifest_presence.rc != 0
        - run_upstream|bool

    - name: "Operator deployment with OLM error status"
      fail:
        msg: 'Operator deployment with OLM failed, check the outputs above for more details'
      when: operator_result.rc != 0 or operator_uptime_raw_rc|int != 0 or operator_uptime_raw_rc is not defined

    - name: "Stay healthy error status"
      fail:
        msg: 'Operator was not capable to stay healthy for a specific time'
      when:
        - operator_uptime_raw_rc|int != 0
        - run_upstream|bool
  when: permisive is not defined or not permisive|bool

- name: "Handle permissive mode when operator is failing to deploy on kind cluster"
  set_fact:
    test_all_add_failed_name_version: "{{ test_all_add_failed_name_version | default([]) }} + [ '{{ operator_name }}:{{ operator_version }}' ]"
  when:
    - permisive is defined
    - permisive|bool
    - operator_result.rc != 0 or operator_uptime is undefined or (operator_uptime is defined and operator_uptime_raw_rc|int != 0)
    - run_upstream|bool

- name: "Set 'test_all_add_ok_name_version' when operator is ok"
  set_fact:
    test_all_add_ok_name_version: "{{ test_all_add_ok_name_version | default([]) }} + [ '{{ operator_name }}:{{ operator_version }}' ]"
  when:
    - permisive is defined
    - permisive|bool
    - operator_result.rc is defined
    - operator_result.rc == 0
    - operator_uptime is defined
    - operator_uptime_raw_rc|int == 0
    - run_upstream|bool
