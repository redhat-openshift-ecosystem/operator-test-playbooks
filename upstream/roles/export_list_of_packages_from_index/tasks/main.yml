---
- name: "Extracting info from index image"
  block:
    - name: "Stop previous index container '{{ sanity_check_container_name }}''"
      shell: "{{ container_tool }} rm -f {{ sanity_check_container_name }}"
      failed_when: false
      changed_when: false
      no_log: true

    - name: "Pulling index container {{ bundle_index_image_input }}"
      shell: "{{ container_tool }} pull {{ bundle_index_image_input }}"
      retries: "{{ default_retries }}"
      delay: "{{ default_delay }}"
      register: elopfi_pull_action_result
      until: elopfi_pull_action_result is not failed
      when: not index_pull_skip

    - name: "Start index container {{ bundle_index_image_input }}"
      shell: "{{ container_tool }} create --name {{ sanity_check_container_name }} {{ bundle_index_image_input }}"

    - name: "Remove db filename '{{ sqlite_db_file }}'"
      file:
        path: "{{ sqlite_db_file }}"
        state: absent

    - name: "Extract db file to '{{ sqlite_db_file }}'"
      shell: "{{ container_tool }} cp {{ sanity_check_container_name }}:/database/index.db {{ sqlite_db_file }}"

    - name: "Getting list of operators"
      shell: "{{ sqlite_tool }} {{ sqlite_db_file }} 'select bundlepath from operatorbundle' | sed 's/^\ | $//g' | grep '{{ elopfi_filter }}' | cut -sd / -f 3- | paste -sd, -"
      register: elopfi_index_operators_out

    - name: "Getting list of packages"
      shell: "{{ sqlite_tool }} {{ sqlite_db_file }} 'select bundlepath from operatorbundle' | sed 's/^\ | $//g' | grep '{{ elopfi_filter }}' |cut -sd / -f 3- | cut -sd: -f 1 | uniq | paste -sd, -"
      register: elopfi_index_packages_out
      no_log: true

    - name: "Getting list of bundles"
      shell: "{{ sqlite_tool }} {{ sqlite_db_file }} 'select bundlepath from operatorbundle' | sed 's/^\ | $//g' | grep '{{ elopfi_filter }}' | uniq | paste -sd, -"
      register: elopfi_index_bundles_out
      no_log: true

    - name: "Stop index container '{{ sanity_check_container_name }}'"
      shell: "{{ container_tool }} rm -f {{ sanity_check_container_name }}"

    - name: "Remove image '{{ bundle_index_image_input }}'"
      shell: "{{ container_tool }} rmi -f {{ bundle_index_image_input }}"
      when: not index_pull_skip

    - name: "Set list of all operators (versions) in index"
      set_fact:
        elopfi_index_operators: "{{ elopfi_index_operators_out.stdout.split(',') }}"
        elopfi_index_packages: "{{ elopfi_index_packages_out.stdout.split(',') }}"
        elopfi_index_bundles: "{{ elopfi_index_bundles_out.stdout.split(',') }}"

    - name: "Check if index has critical amount of operators, less than 'min_operators_in_index_allowed'"
      block:

        - name: "List operators present in index"
          debug:
            var: elopfi_index_packages

        - name: "Print err message"
          fail:
            msg: "Looks like index is too empty, {{ elopfi_index_packages|length }} operator(s) is not allowed, because it is less operators than {{ min_operators_in_index_allowed }} operators in the index - manual check is needed. Index overwrite safety check #1."

      when:
        - min_operators_in_index_allowed is defined
        - min_operators_in_index_allowed|int > 0
        - elopfi_index_packages|length<(min_operators_in_index_allowed|int)

  tags:
    - deploy_bundles
    - index_check
  when:
    - bundle_index_image_input is defined
    - bundle_index_image_input|length > 0
