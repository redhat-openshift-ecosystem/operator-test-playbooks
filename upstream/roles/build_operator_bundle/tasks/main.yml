---
- name: "Setting operator was removed to false"
  set_fact:
    operator_removed: false
    bob_opname: "{{ op_item }}"
    bob_opbasedir: "{{ operator_dir | dirname }}"

- name: "Setting operator was removed to false"
  set_fact:
    bob_opbasedir: "{{ operator_base_dir }}"
  when: op_info is defined

- name: "Checkning if operator name is not name of catalog"
  fail:
    msg: "Name of operator '{{ bob_opname }}' is same as catalog name '{{ bundle_index_image_name }}'"
  when: bundle_index_image_name == bob_opname

- name: "Checking if operator base dir exists"
  stat:
    path: "{{ bob_opbasedir }}/{{ bob_opname }}"
  register: bob_operator_dir_st

- name: "Convert allowed input versions to list"
  set_fact:
    bob_allowed_versions: "{{ supported_cluster_versions.split(',') }}"

- name: "Remove operator"
  include_role:
    name: remove_operator_bundle
  when:
    - not bob_operator_dir_st.stat.exists
    - not use_cluster_filter|bool

- name: "Remove operator"
  include_role:
    name: remove_operator_bundle
  loop: "{{ bob_allowed_versions }}"
  loop_control:
    loop_var: bob_remove_loop
  when:
    - not bob_operator_dir_st.stat.exists
    - use_cluster_filter|bool

- name: "Handling operator '{{ bob_opname }}'"
  block:
    - name: "Search for all versions for operator '{{ bob_opname }}'"
      find:
        paths: "{{ bob_opbasedir }}/{{ bob_opname }}"
        recurse: false
        file_type: directory
      register: bob_versions_find

    - name: "Setting list of versions from directory structre"
      set_fact:
        versions_in_dir: "{{ bob_versions_find.files | map(attribute='path' ) | map('basename') | list | sort_versions }}"
        operator_dir_name: "{{ bob_opname }}"
      when: op_info is undefined

    - debug:
        var: op_info

    - name: "Setting list of versions from directory structre"
      set_fact:
        versions_in_dir: "{{ op_info[bob_opname].versions }}"
        operator_dir_name: "{{ bob_opname }}"
      when: op_info is defined

    - debug:
        var: versions_in_dir

    - name: "Detect format"
      include_role:
        name: detect_format
      vars:
        df_operator_dir: "{{ bob_opbasedir }}/{{ bob_opname }}"
        op_version: "{{ versions_in_dir[0] }}"

    - name: "Get list of versions_in_dir from bundle registry"
      uri:
        url: "{{ registry_api_http_protocol | default('https') }}://{{ bundle_registry }}/v2/{{ bundle_image_namespace }}/{{ operator_package_name }}/tags/list"
      register: bob_registry_versions
      failed_when: false
      changed_when: false

    - name: "Get list of versions_in_prod from bundle production registry ('{{ production_registry_namespace }}')"
      uri:
        url: "{{ registry_api_http_protocol | default('https') }}://{{ production_registry_namespace.split('/')[0] }}/v2/{{ production_registry_namespace.split('/')[1] }}/{{ operator_package_name }}/tags/list"
      register: bob_prod_registry_versions
      failed_when: false
      changed_when: false
      when:
        - production_registry_namespace is defined
        - production_registry_namespace|length > 0

    - name: "Create repo with public visibility"
      uri:
        url: "https://quay.io/api/v1/repository"
        method: POST
        body: '{"kind":"image","namespace":"{{ bundle_image_namespace }}","repository":"{{ operator_package_name }}","description":"Bundle image for {{ operator_package_name }} operator","visibility":"public"}'
        body_format: json
        force_basic_auth: true
        headers:
          Authorization: "Bearer {{ quay_api_token }}"
        status_code: [201, 400]
        return_content: true
      retries: 5
      delay: 10
      register: crwpv_result
      until: crwpv_result.status_code is undefined or crwpv_result.status_code == 201 or crwpv_result.status_code == 400
      when:
        - quay_api_token is defined
        - quay_api_token|length > 0
        - bob_registry_versions.status != 200

    - name: "Get list of versions_in_dir from bundle registry"
      uri:
        url: "{{ registry_api_http_protocol | default('https') }}://{{ openshift_robot_hash_array[0] | dirname }}/v2/{{ openshift_robot_hash_array[0] | basename }}/{{ operator_package_name }}/tags/list"
      register: bob_registry_versions_osr
      failed_when: false
      changed_when: false
      when:
        - openshift_robot_hash_array.1 is defined
        - openshift_robot_hash_array.1|length > 0

    - name: "Create repo with public visibility (openshift robot)"
      uri:
        url: "https://quay.io/api/v1/repository"
        method: POST
        body: '{"kind":"image","namespace":"{{ openshift_robot_hash_array[0] | basename }}","repository":"{{ operator_package_name }}","description":"Bundle image for {{ operator_package_name }} operator","visibility":"public"}'
        body_format: json
        force_basic_auth: true
        headers:
          Authorization: "Bearer {{ openshift_robot_hash_array[1] }}"
        status_code: [201, 400]
      retries: 5
      delay: 10
      register: crwpvor_result
      until: crwpvor_result.status_code is undefined or crwpvor_result.status_code == 201 or crwpvor_result.status_code == 400
      when:
        - openshift_robot_hash_array.1 is defined
        - openshift_robot_hash_array.1|length > 0
        - bob_registry_versions_osr.status != 200

    - name: "Reseting 'versions_in_registry' variable"
      set_fact:
        versions_in_registry: []
        versions_in_prod_registry: []

    - name: "Setting all versions to 'versions_in_registry' variable"
      set_fact:
        versions_in_registry: "{{ (bob_registry_versions.json.tags | sort_versions | join(',') | regex_replace('^v') | regex_replace(',v',',')).split(',') }}"
      when:
        - bob_registry_versions.status is defined
        - bob_registry_versions.status == 200

    - name: "Setting all versions to 'versions_in_prod_registry_full' variable"
      set_fact:
        versions_in_prod_registry_full: "{{ (bob_prod_registry_versions.json.tags | sort_versions | join(',') | regex_replace('^v') | regex_replace(',v',',')).split(',') }}"
      when:
        - bob_prod_registry_versions.status is defined
        - bob_prod_registry_versions.status == 200

    - name: "Setting all versions to 'versions_in_prod_registry' variable without '{{ ignore_image_string }}' to avoid adding to an index"
      set_fact:
        versions_in_prod_registry: "{{ versions_in_prod_registry_full | reject('search', ignore_image_string) | list }}"
      when:
        - bob_prod_registry_versions.status is defined
        - bob_prod_registry_versions.status == 200

    - name: "Filtering versions to add and remove without timestamps to avoid deletions"
      set_fact:
        versions_add: "{{ versions_in_dir | difference(versions_in_registry) | difference(versions_in_prod_registry) }}"
        versions_remove_orig: "{{ versions_in_registry | difference(versions_in_dir) }}"
        versions_remove: "{{ versions_in_registry | difference(versions_in_dir) | reject('search', ignore_image_string) | list }}"

    - name: "Handling bundle versions when 'operator_version' is defined"
      block:
        - name: "Converting 'operator_version' to list"
          set_fact:
            version_list: "[ '{{ operator_version }}' ]"

        - name: "Checking if bundle '{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ operator_version }}' exists"
          block:
            - name: "Setting 'prod_bundle_verion_intersect'"
              set_fact:
                prod_bundle_verion_intersect: "{{ versions_in_prod_registry | intersect(version_list) }}"

            - name: "Fail if '{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ operator_version }}' already exists"
              fail:
                msg: "Failing because '{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ operator_version }}' already exists"
              when:
                - prod_bundle_verion_intersect.0 is defined
                - ( bundle_force_rebuild is undefined or bundle_force_rebuild|bool == false)
          when:
            - production_registry_namespace is defined
            - production_registry_namespace|length > 0

        - name: "Filtering versions to add and remove for only 'operator_version' : '{{ operator_version }}' specified by user"
          set_fact:
            versions_add: "{{ versions_in_dir | intersect(version_list) }}"
            versions_remove: "{{ versions_in_registry | intersect(version_list)| reject('search', ignore_image_string) }}"
            versions_in_dir: "{{ versions_in_dir | intersect(version_list) }}"
          when:
            - (bundle_force_rebuild is undefined or not bundle_force_rebuild|bool)

        - name: "Force rebuild operator 'operator_version'"
          set_fact:
            versions_add: "[ '{{ operator_version }}' ]"
            versions_in_dir: "{{ versions_in_dir | union(versions_add) }}"
            versions_in_prod_registry: "{{ versions_in_prod_registry | difference(versions_add) }}"
          when:
            - bundle_force_rebuild is defined
            - bundle_force_rebuild|bool

      when: operator_version is defined

    - name: "Delete all tags from operator {{ operator_package_name }}. Tags: '{{ versions_remove | join(',') }}'"
      uri:
        url: "https://quay.io/api/v1/repository/{{ bundle_image_namespace }}/{{ operator_package_name }}/tag/v{{ item }}"
        method: DELETE
        force_basic_auth: true
        headers:
          Authorization: "Bearer {{ quay_api_token }}"
        status_code: 204
      ignore_errors: true
      with_items: "{{ versions_remove }}"
      when:
        - quay_api_token is defined
        - quay_api_token|length > 0
        - versions_remove.0 is defined
        - versions_remove.0|length > 0

    - name: "Reset value for unified package test"
      set_fact:
        previous_package: ""

    - name: "Build bundle image"
      include_role:
        name: build_operator_version_bundle
      vars:
        op_version: "{{ op_ver_item }}"
        operator_package_name: "{{ bob_opname }}"
      loop: "{{ versions_add }}"
      loop_control:
        loop_var: op_ver_item

    - name: "Setting tmp bundle versions without production versions"
      set_fact:
        bob_versions_tmp: "{{ versions_in_dir | difference(versions_in_prod_registry) }}"

    - name: "Setting empty bundles array"
      set_fact:
        bob_bundles_arr: []

    - name: "Filling bundle versions from prod for operator '{{ operator_package_name }}'"
      set_fact:
        bob_bundles_arr: "{{ bob_bundles_arr | default([]) }} + [ '{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ item }}' ]"
      with_items: "{{ versions_in_prod_registry }}"
      when:
        - production_registry_namespace is defined
        - production_registry_namespace|length > 0

    - name: "Filling bundle versions for operator '{{ operator_package_name }}'"
      set_fact:
        bob_bundles_arr: "{{ bob_bundles_arr | default([]) }} + [ '{{ bundle_registry }}/{{ bundle_image_namespace }}/{{ operator_package_name }}:v{{ item }}' ]"
      with_items: "{{ bob_versions_tmp }}"

    - name: "Filling bundle versions for operator '{{ operator_package_name }}' for openshift robot case"
      set_fact:
        bob_bundles_arr: "[ '{{ openshift_robot_hash_array[0] }}/{{ operator_package_name }}:{{ openshift_robot_hash_array[2] }}' ]"
      when:
        - openshift_robot_hash_array.2 is defined
        - openshift_robot_hash_array.2|length > 0

    - name: "Adding current operator to the 'operators_for_index'"
      set_fact:
        operators_for_index: "{{ operators_for_index | default([]) | union( [{'name': operator_package_name, 'versions': versions_in_dir, 'versions_prod': versions_in_prod_registry, 'bundles': bob_bundles_arr }]) }}"
      when: versions_add.0 is defined or (index_force_update is defined and index_force_update|bool)

    - name: "Adding current operator to the 'operators_for_index' when only removed version is defined"
      set_fact:
        operators_for_index: "{{ operators_for_index | default([]) | union( [{'name': operator_package_name, 'versions': versions_in_dir, 'versions_prod': versions_in_prod_registry, 'bundles': bob_bundles_arr }]) }}"
      when:
        - versions_add.0 is undefined
        - versions_remove.0 is defined

  when: bob_operator_dir_st.stat.exists
