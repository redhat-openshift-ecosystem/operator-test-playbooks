---

- name: "Failing when 'production_registry_namespace' is missing"
  fail:
    msg: "The 'production_registry_namespace' variable is missing. Please set it via '-e production_registry_namespace=<registry/namespace>'"
  when: production_registry_namespace is undefined or production_registry_namespace == ""

- name: "Setting 'operator_dir_name'"
  set_fact:
    operator_dir_name: "{{ operator_dir | basename }}"

- name: "Get list of versions_in_dir from bundle production registry ('{{ production_registry_namespace }}')"
  uri:
    url: "{{ registry_api_http_protocol | default('https') }}://{{ production_registry_namespace.split('/')[0] }}/v2/{{ production_registry_namespace.split('/')[1] }}/{{ operator_dir_name }}/tags/list"
  register: cpb_prod_registry_versions
  failed_when: false
  changed_when: false

- name: "Setting all versions to 'cpb_versions' variable"
  set_fact:
    cpb_versions: "{{ (cpb_prod_registry_versions.json.tags | sort_versions | join(',') | regex_replace('^v') | regex_replace(',v',',')).split(',') }}"
  when:
  - cpb_prod_registry_versions.status is defined
  - cpb_prod_registry_versions.status == 200

- name: "Converting 'operator_version' to list"
  set_fact:
    version_list: "[ '{{ operator_version }}' ]"

- name: "Checking if bundle '{{ production_registry_namespace }}/{{ operator_dir_name }}:v{{ operator_version }}' exists"
  block:
    - name: "Setting 'cpb_versions_intersect'"
      set_fact:
        cpb_versions_intersect: "{{ cpb_versions | intersect(version_list) }}"

    - name: "Fail if '{{ production_registry_namespace }}/{{ operator_dir_name }}:v{{ operator_version }}' already exists"
      fail:
        msg: "Failing because '{{ production_registry_namespace }}/{{ operator_dir_name }}:v{{ operator_version }}' already exists"
      when: cpb_versions_intersect.0 is defined
