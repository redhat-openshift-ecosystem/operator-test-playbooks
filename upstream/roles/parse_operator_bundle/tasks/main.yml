---
- name: "Parsing the operator bundle data"
  block:
  - name: "Inspect the bundle image with skopeo"
    shell: "skopeo inspect {{ image_protocol }}{{ bundle_image }}"
    register: skopeo_inspect_result

  - name: "Save the skopeo inspect output to a log file"
    copy:
      content: "{{ skopeo_inspect_result.stdout }}"
      dest: "{{ work_dir }}/bundle-skopeo-inspect.json"
    when:
      - skopeo_inspect_result is defined
      - skopeo_inspect_result.stdout != ""

  - name: "Include the skopeo inspect result vars"
    set_fact:
      skopeo_inspect_json: "{{ skopeo_inspect_result.stdout | from_json }}"

  - name: "Verify required labels"
    block:
      - name: "Set the failed labels to an empty string and is_bundle_image to false"
        set_fact:
          failed_labels: ""
          is_bundle_image: false

      - name: "If the required label is not found among the image labels, add it to the failed_labels"
        set_fact:
          failed_labels: "{{ failed_labels }} {{ item }}"
        when: item not in skopeo_inspect_json.Labels
        loop: "{{ required_labels }}"

      - name: "Fail if any of the required operator bundle image label(s) are not found"
        fail:
          msg: "Required operator bundle image label(s) not found: {{ failed_labels }}"
        when: failed_labels != ""

      - name: "If the image contains all of the required labels for a bundle image, set the is_bundle_image to true"
        set_fact:
          is_bundle_image: true
    when: not run_upstream|bool

  - name: "Set the main operator bundle info as parsed from the bundle image labels"
    set_fact:
      package_name: "{{ skopeo_inspect_json.Labels['operators.operatorframework.io.bundle.package.v1'] }}"
      default_channel: "{{ skopeo_inspect_json.Labels['operators.operatorframework.io.bundle.channel.default.v1'] }}"
      channels: "{{ skopeo_inspect_json.Labels['operators.operatorframework.io.bundle.channels.v1'].split(',') }}"
      is_bundle_image: true
      ocp_versions: []
      # if backport label missing, an empty is_backport means not set.
      is_backport: ""

  - name: "Set the main operator bundle info as parsed from the bundle image labels"
    set_fact:
      is_bundle_image: "{{ skopeo_inspect_json.Labels['com.redhat.delivery.operator.bundle'] }}"
      ocp_versions: "{{ skopeo_inspect_json.Labels['com.redhat.openshift.versions'].split(',') }}"
    when: not run_upstream|bool

  - name: "Set the current channel to the first value from the operators.operatorframework.io.bundle.channels.v1 label"
    set_fact:
      current_channel: "{{ channels[0] }}"

  - name: "Set is_backport according to the com.redhat.delivery.backport label, if it's missing, an empty is_backport means not set."
    set_fact:
      is_backport: "{{ skopeo_inspect_json.Labels['com.redhat.delivery.backport'] }}"
    when: skopeo_inspect_json.Labels['com.redhat.delivery.backport'] is defined

#  - name: "Default doic_skip_file_check true"
#    set_fact:
#       doic_skip_file_check: false

  - block:
    - name: "Determine paths with kind ClusterServiceVersion"
      find:
        paths: "{{ operator_work_dir }}"
        file_type: file
        contains: 'kind: ClusterServiceVersion'
        recurse: true
      register: kind_custerserviceversion_file_paths

    - name: "Set the first location found as the CSV path since the operator bundles only support having one CSV"
      set_fact:
        csv_path: "{{ kind_custerserviceversion_file_paths['files'][0]['path'] }}"

    - name: "Set variables for csv_path and current_csv_dir"
      set_fact:
        current_csv_dir: "{{ csv_path | dirname }}"

    - name: "Determine the CRD paths in the operator metadata directory"
      find:
        paths: "{{ current_csv_dir }}"
        file_type: file
        contains: 'kind: CustomResourceDefinition'
      register: crd_paths_result

    - name: "Set crd_paths to collect crd_paths"
      set_fact:
        crd_paths: []

    - name: "Get paths from crd_paths_result"
      set_fact:
        crd_paths: "{{ crd_paths + [item.path] }}"
      with_items: "{{ crd_paths_result['files'] }}"
      no_log: true

    - name: "Include the CSV path into the ansible vars"
      include_vars:
        file: "{{ csv_path }}"
        name: operator_vars
      when: not run_upstream|bool

    - name: "List of operator variables"
      debug:
        var: operator_vars
        verbosity: 2

    - name: "Determine and set fact for operator specific information - name, pod name, container name and capabilities"
      set_fact:
        current_csv: "{{ operator_vars.metadata.name }}"
        operator_pod_name: "{{ operator_vars.spec.install.spec.deployments[0].name }}"
        operator_container_name: "{{ operator_vars.spec.install.spec.deployments[0].spec.template.spec.containers[0].name }}"
        operator_capabilities: "{{ operator_vars.metadata.annotations.capabilities | default('Basic Install')}}"

    - name: "Determine operator_allnamespaces_support"
      set_fact:
        operator_allnamespaces_support: "{{ operator_vars.spec.installModes | json_query(query) }}"
      vars:
        query: "[?type=='AllNamespaces'].supported"

    - name: "Determine operator_ownnamespace_support"
      set_fact:
        operator_ownnamespace_support: "{{ operator_vars.spec.installModes | json_query(query) }}"
      vars:
        query: "[?type=='OwnNamespace'].supported"

    - name: "Determine operator_singlenamespace_support"
      set_fact:
        operator_singlenamespace_support: "{{ operator_vars.spec.installModes | json_query(query) }}"
      vars:
        query: "[?type=='SingleNamespace'].supported"

    - name: "Determine operator_multinamespace_support"
      set_fact:
        operator_multinamespace_support: "{{ operator_vars.spec.installModes | json_query(query) }}"
      vars:
        query: "[?type=='MultiNamespace'].supported"

    - name: "Set boolean value for different types of namespaces"
      set_fact:
        operator_allnamespaces_support: "{{ false if operator_allnamespaces_support == [] else operator_allnamespaces_support[0] }}"
        operator_ownnamespace_support: "{{ false if operator_ownnamespace_support == [] else operator_ownnamespace_support[0] }}"
        operator_singlenamespace_support: "{{ false if operator_singlenamespace_support == [] else operator_singlenamespace_support[0] }}"
        operator_multinamespace_support: "{{ false if operator_multinamespace_support == [] else operator_multinamespace_support[0] }}"

    - name: "Output all collected data to a yaml file in work dir"
      template:
        src: "parsed_operator_data.yml.j2"
        dest: "{{ work_dir }}/parsed_operator_data.yml"
    when:
      - (doic_skip_file_check is not defined) or (not doic_skip_file_check|bool)


  - name: "Sanity check the operator bundle's information"
    include_tasks: "bundle_sanity_checks.yml"
    when:
      bundle_sanity_checks|bool

  rescue:

    - name: "Rescue block contains the error messages"
      debug:
        msg: "Rescue block has found an error, The following are details of failed task."

    - name: "FAILED task name in ansible is as follows:"
      debug:
        msg: "{{ ansible_failed_task.name }}"

    - name: "Result of failed task"
      debug:
        msg: "{{ ansible_failed_result }}"

    - name: "Result of failure"
      fail:
        msg: "Ansible playbook while preparing the operator metadata failed"