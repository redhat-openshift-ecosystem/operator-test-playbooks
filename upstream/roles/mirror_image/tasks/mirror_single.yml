---
- name: "Mirroring image to multiple locations"
  block:
    - name: "Parsing output image with login information"
      no_log: true
      set_fact:
        ms_info: "{{ mi.split('|') }}"
        ms_image_postfix: ""

    - name: "Failing when image is not defined"
      fail:
        msg: "Mirror image is not defined correctly !!!"
      when:
        - ms_info.0 is undefined

    - name: "Login to docker registry"
      shell: "{{ container_tool }} login -u={{ ms_info[1] }} -p={{ ms_info[2] }} {{  ms_info[0].split('/')[0] }}"
      no_log: true
      when:
        - ms_info.1 is defined
        - ms_info.2 is defined

    - name: "Add index image postfix if needed"
      no_log: true
      set_fact:
        ms_image_postfix: "{{ ms_info[3] }}"
      when:
        - ms_info.3 is defined

    - name: "Mirroring index image '{{ mirror_input_image }}{{ ms_image_postfix }}' to mirror location '{{ ms_info[0] }}'"
      block:
        - name: "Pulling latest input image '{{ mirror_input_image }}{{ ms_image_postfix }}'"
          shell: "{{ container_tool }} pull {{ mirror_input_image  }}{{ ms_image_postfix }}"
        - name: "Doing retag of '{{ mirror_input_image }}{{ ms_image_postfix }}' to '{{ ms_info[0] }}'"
          shell: "{{ container_tool }} tag {{ mirror_input_image  }}{{ ms_image_postfix }} {{ ms_info[0] }}"
        - name: "Index safety check to avoid accidental overwrite"
          include_role:
            name: export_list_of_packages_from_index
          vars:
            bundle_index_image_input: "{{ bundle_index_image }}"
            index_pull_skip: true
          when: min_operators_in_index_allowed is defined

        - name: "Push image '{{ ms_info[0] }}'"
          shell: "{{ container_tool }} push {{ container_push_extra }} {{ ms_info[0] }}"
      when:
        - mirror_input_image is defined
        - mirror_input_image|length > 0
        - mirror_multiarch_image is undefined

    - name: "Mirroring multi arch index image '{{ mirror_multiarch_image }}' to mirror location '{{ ms_info[0] }}'"
      block:
        - name: "Set 'mirror_input_image' to 'mirror_input_image_tmp'"
          set_fact:
            mirror_input_image_final: '{{ mirror_input_image }}{{ ms_image_postfix }}'

        - name: "Handle case when 'mirror_input_image' starts with 'kind-registry'"
          block:
            - name: "Retag iib local input image"
              shell: "{{ container_tool }} tag {{ mirror_input_image_final }} {{ iib_input_local_host_image_base }}"

            - name: "Push iib local input image"
              shell: "{{ container_tool }} push {{ iib_input_local_host_image_base }}"

            - name: "Set iib local input image"
              set_fact:
                mirror_input_image_final: "{{ iib_input_local_worker_image_base }}"

          when: mirror_input_image.startswith('kind-registry')

        - name: "Triggering http request to build multiarch image "
          shell: "curl -s {{ iib_url_options }} --request POST --url {{ iib_base_url }}/api/v1/builds/add --header 'content-type: application/json' --data '{\"add_arches\": [\"amd64\", \"s390x\", \"ppc64le\"],\"binary_image\": \"{{ mirror_multiarch_image }}\",\"from_index\": \"{{ mirror_input_image_final }}\"}'"
          register: mi_ms_multiarch_request

        - name: "Fail in when request was not succesfull"
          fail:
            msg: "Triggering http rquest to build multiarch image failed"
          when: mi_ms_multiarch_request.rc != 0

        - name: "Print multi arch request"
          debug:
            var: mi_ms_multiarch_request

        - name: "Parsing id from http response"
          set_fact:
            mi_ms_multiarch_response: "{{ mi_ms_multiarch_request.stdout | from_json }} "

        - name: "Set input iib image"
          set_fact:
            mi_ms_iib_id: "{{ mi_ms_multiarch_response.id }}"

        - name: "Set input iib image"
          set_fact:
            mi_ms_iib_image: "{{ iib_converted_image_base }}:{{ mi_ms_iib_id }}"

        - name: "Waiting for iib to finish image creation. Image: '{{ mi_ms_iib_image }}'"
          uri:
            url: "{{ iib_base_url }}/api/v1/builds/{{ mi_ms_iib_id }}/logs"
            method: GET
            validate_certs: false
            return_content: true
          register: mi_ms_multiarch_response
          until: "'complete' in mi_ms_multiarch_response.content"
          retries: 50
          delay: 10

        - name: "Set input iib image to localhost when using local iib service"
          set_fact:
            mi_ms_iib_image: "localhost:8443/iib-build:{{ mi_ms_iib_id }}"
          when: iib_converted_image_base == "registry:8443/iib-build"

        - name: "Transfer image from '{{ mi_ms_iib_image }}' to '{{ ms_info[0] }}{{ mi_tmp_postfix }}'"
          shell: "skopeo copy -a docker://{{ mi_ms_iib_image }} docker://{{ ms_info[0] }}{{ mi_tmp_postfix }} --src-tls-verify=false"

        - name: "Retag '{{ ms_info[0] }}{{ mi_tmp_postfix }}' to '{{ ms_info[0] }}'"
          shell: "{{ container_tool }} tag {{ ms_info[0] }}{{ mi_tmp_postfix }} {{ ms_info[0] }}"

        - name: "Push '{{ ms_info[0] }}'"
          shell: "{{ container_tool }} push {{ ms_info[0] }}"

        - name: "Transfer extra tag"
          block:
            - name: "Retag '{{ ms_info[0] }}{{ mi_tmp_postfix }}' to '{{ ms_info[4] }}'"
              shell: "{{ container_tool }} tag {{ ms_info[0] }}{{ mi_tmp_postfix }} {{ ms_info[4] }}"
              no_log: true

            - name: "Push '{{ ms_info[4] }}'"
              shell: "{{ container_tool }} push {{ ms_info[4] }}"
              no_log: true
          when:
            - ms_info.4 is defined

      when:
        - mirror_input_image is defined
        - mirror_input_image|length > 0
        - mirror_multiarch_image is defined
        - mirror_multiarch_image|length > 0
  tags:
    - mirror_index
    - deploy_bundles
