---
- name: "Mirroring image to multiple locations"
  block:
    - name: "Parsing output image with login information"
      no_log: true
      set_fact:
        ms_info: "{{ mi.split('|') }}"
        ms_image_postfix: ""
        bmi_tmp_postfix: "{{ mi_tmp_postfix }}"

    - name: "Failing when image is not defined"
      fail:
        msg: "Mirror image is not defined correctly !!!"
      when:
        - ms_info.0 is undefined

    - name: "Login to docker registry"
      shell: "{{ container_tool }} login -u={{ ms_info[1] }} -p={{ ms_info[2] }} {{  ms_info[0].split('/')[0] }}"
      no_log: true
      when:
        - ms_info.1 is defined
        - ms_info.1|length > 0
        - ms_info.2 is defined
        - ms_info.2|length > 0

    - name: "Add index image postfix if needed"
      no_log: true
      set_fact:
        ms_image_postfix: "{{ ms_info[3] }}"
      when:
        - ms_info.3 is defined

    - name: "Set 'mirror_input_image_final' to '{{ mirror_input_image }}{{ ms_image_postfix }}'"
      set_fact:
        mirror_input_image_final: "{{ mirror_input_image }}{{ ms_image_postfix }}"
      when:
        - mi_input_index_already_set is defined
        - not mi_input_index_already_set

    - name: "Mirroring index image '{{ mirror_input_image_final }}' to mirror location '{{ ms_info[0] }}'"
      block:
        - name: "Pulling latest input image '{{ mirror_input_image_final }}'"
          shell: "{{ container_tool }} pull {{ mirror_input_image  }}{{ ms_image_postfix }}"

        - name: "Doing retag of '{{ mirror_input_image_final }}' to '{{ ms_info[0] }}'"
          shell: "{{ container_tool }} tag {{ mirror_input_image  }}{{ ms_image_postfix }} {{ ms_info[0] }}"

        - name: "Index safety check to avoid accidental overwrite"
          include_role:
            name: export_list_of_packages_from_index
          vars:
            bundle_index_image_input: "{{ bundle_index_image }}"
            index_pull_skip: true
          when: min_operators_in_index_allowed is defined

        - name: "Push image '{{ ms_info[0] }}'"
          shell: "{{ container_tool }} push {{ container_push_extra }} {{ ms_info[0] }}"
      when:
        - mirror_input_image is defined
        - mirror_input_image|length > 0
        - mirror_multiarch_image_final is undefined

    - name: "Pull input image '{{ mirror_input_image_final }}'"
      shell: "{{ container_tool }} pull {{ mirror_input_image_final }}"
      register: ms_pull_mirror_input_image_final
      failed_when: false

    - name: "Reset archs list"
      set_fact:
        mi_actual_architectures: []

    - name: "Detect architectures from image '{{ mirror_input_image_final }}'"
      shell: "{{ container_tool }} manifest inspect {{ mirror_input_image_final }} | {{ jq_bin_path }} '.manifests[].platform.architecture' -r"
      register: mi_archs_inspect_result
      failed_when: false

    - name: "Parse archs to a list"
      set_fact:
        mi_actual_architectures: "{{ mi_archs_inspect_result.stdout_lines | list }}"
      when: mi_archs_inspect_result.rc == 0

    # - name: "Pulling latest input image '{{ mirror_input_image_final }}'"
    #   shell: "{{ container_tool }} pull {{ mirror_input_image  }}{{ ms_image_postfix }}"

    #TODO: index safety check

    - name: "Show mi_actual_architectures"
      debug:
        var: mi_actual_architectures

    - name: "Show mi_actual_architectures | list |count"
      debug:
        var: mi_actual_architectures | list |count

    - name: "Mirror already existing multiarch image phase I temp {{ image_protocol }}{{ mirror_input_image  }}{{ ms_image_postfix }} to {{ image_protocol }}{{ ms_info[0] }}_tmp"
      shell: "skopeo copy -a {{ image_protocol }}{{ mirror_input_image  }}{{ ms_image_postfix }} {{ image_protocol }}{{ ms_info[0] }}_tmp"
      when:
        - mi_actual_architectures | list |count > 1

    - name: "Mirror multiarch final {{ image_protocol }}{{ ms_info[0] }}_tmp to {{ image_protocol }}{{ ms_info[0] }}"
      shell: "skopeo copy -a {{ image_protocol }}{{ ms_info[0] }}_tmp {{ image_protocol }}{{ ms_info[0] }}"
      when:
        - mi_actual_architectures | list |count > 1

    - name: "Input is a single arch SQL image - creating multiarch"
      block:
        - name: "Build multiarch SQL image"
          include_role:
            name: build_multiarch_image
          vars:
            bmi_output_image: "{{ ms_index_prod_location }}"
            bmi_output_image_format: "sql"
            bmi_input_image: "{{ mirror_input_image_final }}"
            bmi_input_image_format: "sql"
      when:
        - mi_actual_architectures |list | count <= 1
  tags:
    - mirror_index
    - deploy_bundles
