---
- name: "Reset upgrade_test_possible"
  set_fact:
    upgrade_test_possible: false

- name: "Set 'tou_upgrade_from' in case of replaces mode"
  block:
    - name: "Get replaces"
      set_fact:
        tou_replaces: "{{ op_info[operator_package_name].manifests[operator_bundle_version_for_upgrade].replaces }}"

    - name: "Set 'tou_upgrade_from' in case of replaces mode"
      set_fact:
        tou_upgrade_from: "{{ op_info[operator_package_name].manifests[operator_bundle_version_for_upgrade].replaces }}"
        tou_upgrade_to: "{{ operator_bundle_version_for_upgrade }}"
        upgrade_test_possible: true
      when: tou_replaces|length != 0

  when: op_info[operator_package_name].mode == "replaces"

- name: "Set 'tou_upgrade_from' in case of semver mode"
  block:
    - name: "Set 'pick_upgrade_version_from_list'"
      set_fact:
        pick_upgrade_version_from_list: "{{ op_info[operator_package_name].versions|list }}"

    - name: "debug 01"
      debug:
        var: pick_upgrade_version_from_list

    - name: "debug 02"
      debug:
        var: operator_bundle_version_for_upgrade

    - name: "Find current_operator_index_in_list"
      set_fact:
        tou_current_operator_index_in_list: "{{ lookup('ansible.utils.index_of', pick_upgrade_version_from_list, 'eq', operator_bundle_version_for_upgrade) }}"

    - debug:
        var: tou_current_operator_index_in_list

    - name: "Find previous_operator_index_in_list"
      set_fact:
        tou_previous_operator_index_in_list: "{{ tou_current_operator_index_in_list[0]|int - 1 }}"

    - debug:
        var: tou_previous_operator_index_in_list

    - name: "Set 'tou_upgrade_from' in case of semver mode"
      set_fact:
        tou_upgrade_from: "{{ pick_upgrade_version_from_list[tou_previous_operator_index_in_list] }}"
        tou_upgrade_to: "{{ operator_bundle_version_for_upgrade }}"
      failed_when: false

    - debug:
        var: tou_upgrade_from

    - name: "Set 'upgrade_test_possible'"
      set_fact:
        upgrade_test_possible: true
      when: pick_upgrade_version_from_list[tou_previous_operator_index_in_list] is defined

  when: op_info[operator_package_name].mode == "semver"

- name: "Test operator upgrade"
  block:

    - name: "Set paths to bundles for upgrade process"
      set_fact:
        tou_operator_bundle_for_install: "{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ tou_upgrade_from }}"
        tou_operator_bundle_for_upgrade: "{{ tou_local_registry_namespace }}/{{ operator_package_name }}:v{{ tou_upgrade_to }}"






# #TODO: remove it
#     - name: "xxxxxxx Overwrite operator_bundle_for_upgrade"
#       set_fact:
#         # tou_operator_bundle_for_install: "{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ tou_upgrade_from }}"
#         tou_operator_bundle_for_upgrade: "quay.io/operatorhubio/aqua:v6.5.2"
#       when: op_info[operator_package_name].mode == "replaces"


#     - name: "Installing {{ tou_operator_bundle_for_install }}"
#       shell: "{{ operator_sdk_bin_path }} run bundle {{ tou_operator_bundle_for_install }}"

#     - name: "Testing operator upgrade from {{ tou_operator_bundle_for_install }} to  {{ tou_operator_bundle_for_upgrade }}"
#       shell: "{{ operator_sdk_bin_path }} run bundle-upgrade {{ tou_operator_bundle_for_upgrade }}"
#       register: tou_upgrade_rc

#     - name: "Update status"
#       debug:
#         msg: "Upgraded operator from {{ tou_operator_bundle_for_install }} to  {{ tou_operator_bundle_for_upgrade }}  [OK]"
#       when: tou_upgrade_rc.rc == 0

#     - name: "Cleanup {{ operator_name }}"
#       shell: "{{ operator_sdk_bin_path }} cleanup {{ operator_name }}"
#       failed_when: false

#     - name: "Set CORRECT paths to bundles for upgrade process"
#       set_fact:
#         tou_operator_bundle_for_upgrade: "{{ tou_local_registry_namespace }}/{{ operator_package_name }}:v{{ tou_upgrade_to }}"







    - name: "Check if OLM is needed"
      shell: "{{ oc_bin_path }} api-resources | grep -o operatorgroup"
      register: olm_needed
      failed_when: false

    - name: "Install OLM"
      block:
        - name: "Installing OLM"
          shell: "{{ operator_sdk_bin_path }} olm install --version {{ olm_version }} --timeout 5m0s"
          register: olm_install_rc
          retries: 10
          delay: 5
          until: olm_install_rc.rc == 0

        - name: "Delete catalogsource"
          shell: "{{ oc_bin_path }} delete catalogsource operatorhubio-catalog -n olm"
          failed_when: false
      when:
        - olm_needed.stdout is not search('operatorgroup')

    - name: "Installing {{ tou_operator_bundle_for_install }}"
      shell: "{{ operator_sdk_bin_path }} run bundle {{ tou_operator_bundle_for_install }}"

    - name: "Testing operator upgrade from {{ tou_operator_bundle_for_install }} to  {{ tou_operator_bundle_for_upgrade }}"
      shell: "{{ operator_sdk_bin_path }} run bundle-upgrade {{ tou_operator_bundle_for_upgrade }}"
      register: tou_upgrade_rc

    - name: "Update status"
      debug:
        msg: "Upgraded operator from {{ tou_operator_bundle_for_install }} to  {{ tou_operator_bundle_for_upgrade }}  [OK]"
      when: tou_upgrade_rc.rc == 0

    - name: "Cleanup {{ operator_name }}"
      shell: "{{ operator_sdk_bin_path }} cleanup {{ operator_name }}"
      failed_when: false

  when: upgrade_test_possible|bool
