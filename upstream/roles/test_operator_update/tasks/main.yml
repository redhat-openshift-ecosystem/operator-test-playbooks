---
- name: "Reset upgrade_test_possible"
  set_fact:
    upgrade_test_possible: false

- name: "Set 'tou_upgrade_from' in case of replaces mode"
  block:
    - name: "Get replaces"
      set_fact:
        tou_replaces: "{{ op_info[operator_package_name].manifests[operator_bundle_version_for_upgrade].replaces }}"

    - name: "Set 'tou_upgrade_from' in case of replaces mode"
      set_fact:
        tou_upgrade_from: "{{ op_info[operator_package_name].manifests[operator_bundle_version_for_upgrade].replaces }}"
        tou_upgrade_to: "{{ operator_bundle_version_for_upgrade }}"
        upgrade_test_possible: true
      when: tou_replaces|length != 0

  when: op_info[operator_package_name].mode == "replaces"

- name: "Set 'tou_upgrade_from' in case of semver mode"
  block:
    - name: "Set 'pick_upgrade_version_from_list'"
      set_fact:
        pick_upgrade_version_from_list: "{{ op_info[operator_package_name].versions|list }}"

    - name: "Find current_operator_index_in_list"
      set_fact:
        tou_current_operator_index_in_list: "{{ lookup('ansible.utils.index_of', pick_upgrade_version_from_list, 'eq', operator_bundle_version_for_upgrade) }}"

    - name: "Find previous_operator_index_in_list"
      set_fact:
        tou_previous_operator_index_in_list: "{{ tou_current_operator_index_in_list|int - 1 }}"

    - name: "Set 'tou_upgrade_from' in case of semver mode"
      set_fact:
        tou_upgrade_from: "{{ pick_upgrade_version_from_list[tou_previous_operator_index_in_list|int] }}"
        tou_upgrade_to: "{{ operator_bundle_version_for_upgrade }}"
      failed_when: false

    - name: "Set 'upgrade_test_possible'"
      set_fact:
        upgrade_test_possible: true
      when: pick_upgrade_version_from_list[tou_previous_operator_index_in_list|int] is defined

  when: op_info[operator_package_name].mode == "semver"

- name: "Test operator upgrade"
  block:

    - name: "Set paths to bundles for upgrade process - k8s"
      set_fact:
        tou_operator_bundle_for_install: "{{ production_registry_namespace }}/{{ operator_package_name }}:v{{ tou_upgrade_from }}"
        tou_operator_bundle_for_upgrade: "{{ tou_local_registry_namespace }}/{{ operator_package_name }}:v{{ tou_upgrade_to }}"
      when:
        - cluster_type is defined
        - cluster_type == "k8s"

    - name: "Set paths to bundles for upgrade process - Openshift"
      set_fact:
        tou_operator_bundle_for_install: "{{ external_production_registry_namespace }}/{{ operator_package_name }}:v{{ tou_upgrade_from }}"
        tou_operator_bundle_for_upgrade: "quay.io/{{ test_quay_namespace }}/{{ operator_package_name }}:{{ commit_tag }}"
      when: (cluster_type is not defined) or (cluster_type != "k8s")

    - name: "Check if OLM is needed"
      shell: "{{ oc_bin_path }} api-resources | grep -o operatorgroup"
      register: olm_needed
      failed_when: false

    - name: "Install OLM"
      block:
        - name: "Installing OLM"
          shell: "{{ operator_sdk_bin_path }} olm install --version {{ olm_version }} --timeout 5m0s"
          register: olm_install_rc
          retries: "{{ default_retries }}"
          delay: "{{ default_delay }}"
          until: olm_install_rc.rc == 0

        - name: "Delete catalogsource"
          shell: "{{ oc_bin_path }} delete catalogsource operatorhubio-catalog -n {{ tou_olm_namespace }}"
          failed_when: false
      when:
        - olm_needed.stdout is not search('operatorgroup')

    - name: "Show sdk version"
      shell: "{{ operator_sdk_bin_path }} version"
      register: sdk_version_for_upgrade

    - name: "Create namespace for upgrade tests"
      shell: "{{ oc_bin_path }} create ns {{ tou_namespace_for_upgrades }}"

    - name: "Installing {{ tou_operator_bundle_for_install }} with {{ sdk_version_for_upgrade.stdout }}"
      shell: "{{ operator_sdk_bin_path }} run bundle {{ tou_operator_bundle_for_install }} -n {{ tou_namespace_for_upgrades }} --skip-tls-verify"
      register: tou_n_1_rc
      ignore_errors: true

    - name: "Test upgrade when previous version present"
      block:

        - name: "Testing operator upgrade from {{ tou_operator_bundle_for_install }} to {{ tou_operator_bundle_for_upgrade }}"
          shell: "{{ operator_sdk_bin_path }} run bundle-upgrade {{ tou_operator_bundle_for_upgrade }} -n {{ tou_namespace_for_upgrades }} --skip-tls-verify"
          register: tou_upgrade_rc
          ignore_errors: true

        - name: "Debug"
          block:
            - name: "Determine source name"
              set_fact:
                bundle_registry_source_domain: "kind-registry"
              when: tou_operator_bundle_for_upgrade.startswith('kind-registry')

            - name: "Get catalog-operator pod name"
              shell: "{{ oc_bin_path }} get pods --all-namespaces|grep catalog-operator| awk '{print $2}'"
              register: tou_catalog_pod

            - name: "Logs"
              shell: "{{ oc_bin_path }} logs {{ tou_catalog_pod.stdout }} -n {{ tou_olm_namespace }}"
              register: tou_catlog_pod_log

            - name: "Show logs"
              debug:
                var: tou_catlog_pod_log

            - name: "Get olm pod name"
              shell: "{{ oc_bin_path }} get pods --all-namespaces|grep olm-operator| awk '{print $2}'|head -n 1"
              register: tou_olm_pod

            - name: "Logs"
              shell: "{{ oc_bin_path }} logs {{ tou_olm_pod.stdout }} -n {{ tou_olm_namespace }}"
              register: tou_olm_pod_log
              ignore_errors: true

            - name: "Show logs"
              debug:
                var: tou_olm_pod_log

            - name: "Get pods"
              shell: "{{ oc_bin_path }} get pods --all-namespaces"
              register: tou_pods

            - name: "Show logs"
              debug:
                var: tou_pods

            - name: "Get pod name"
              shell: "{{ oc_bin_path }} get pods --all-namespaces|grep {{ bundle_registry_source_domain }}|grep {{ operator_package_name }}| awk '{print $2}'|head -n 1"
              register: tou_registry_pod

            - name: "Logs"
              shell: "{{ oc_bin_path }} logs {{ tou_registry_pod.stdout }} -n default"
              register: tou_pod_log
              ignore_errors: true

            - name: "Show logs"
              debug:
                var: tou_pod_log

          when: tou_upgrade_rc.rc != 0

        - name: "Report unable to install N-1"
          # fail:
          debug:
            msg: "Unable to test operator upgrade due to failed installation on N-1 bundle. Debug by running 'operator sdk run bundle {{ tou_operator_bundle_for_install }}'  [FAIL]"
          when: tou_n_1_rc.rc != 0

        - name: "Update status"
          debug:
            msg: "Upgraded operator from {{ tou_operator_bundle_for_install }} to  {{ tou_operator_bundle_for_upgrade }}  [OK]"
          when: tou_upgrade_rc.rc == 0

        - name: "Update status if wrong"
          # fail:
          debug:
            msg: "Operator upgrade failed, you can debug locally by 2 commands: 'operator sdk run bundle BUNDLE_N-1; operator-sdk run bundle-upgrade BUNDLE_N'  [FAIL]"
          when: tou_upgrade_rc.rc != 0

      when: tou_n_1_rc.rc == 0

    - name: "Report unable to install N-1"
      debug:
        msg: "Unable to install N-1 bundle. Upgrade testing not relevant. Sometimes happens when multiple versions in a single PR.'  [OK]"
      when: tou_n_1_rc.rc != 0

    - name: "Cleanup {{ operator_name }}"
      shell: "{{ operator_sdk_bin_path }} cleanup {{ operator_name }} -n {{ tou_namespace_for_upgrades }}"
      failed_when: false

  when: upgrade_test_possible|bool
