- name: "Setting operator was removed to false"
  set_fact:
    operator_removed: false

- name: "Checking if operator base dir exists"
  stat:
    path: "{{ operator_dir }}"
  register: bob_operator_dir_st

- name: "Remove operator"
  include_role:
    name: remove_operator_bundle
  when: not bob_operator_dir_st.stat.exists

- name: "Handling operator '{{ operator_dir | basename }}'"
  block:
    - name: "Search for all versions for operator '{{ operator_dir | basename }}'"
      find:
        paths: "{{ operator_dir }}"
        recurse: no
        file_type: directory
      register: bob_versions_find

    - name: "Setting list of versions from directory structre"
      set_fact:
        versions_in_dir: "{{ bob_versions_find.files | map(attribute='path' ) | map('basename') | list | sort_versions }}"
        operator_dir_name: "{{ operator_dir | basename }}"

    - name: "Detect format"
      include_role:
        name: detect_format
      vars:
        operator_input_image: ""
        op_version: "{{ versions_in_dir[0] }}"

    - name: "Get list of versions_in_dir from bundle registry"
      uri:
        url: "{{ registry_api_http_protocol | default('https') }}://{{ bundle_registry }}/v2/{{ bundle_image_namespace }}/{{ operator_package_name }}/tags/list"
        # return_content: yes
      register: bob_registry_versions
      failed_when: false
      changed_when: false

    - name: "Get list of versions_in_dir from bundle production registry ('{{ production_registry_namespace }}')"
      uri:
        url: "{{ registry_api_http_protocol | default('https') }}://{{ production_registry_namespace.split('/')[0] }}/v2/{{ production_registry_namespace.split('/')[1] }}/{{ operator_package_name }}/tags/list"
        # return_content: yes
      register: bob_prod_registry_versions
      failed_when: false
      changed_when: false
      when:
        - production_registry_namespace is defined
        - production_registry_namespace != ""

    - name: "Create repo with public visibility"
      uri:
        url: "{{ registry_api_http_protocol | default('https') }}://quay.io/api/v1/repository"
        method: POST
        body: '{"kind":"image","namespace":"{{ bundle_image_namespace }}","repository":"{{ operator_package_name }}","description":"Bundle image for {{ operator_package_name }} operator","visibility":"public"}'
        body_format: json
        force_basic_auth: yes
        headers:
          Authorization: "Bearer {{ quay_api_token }}"
        status_code: 201
        return_content: yes
      when:
        - quay_api_token is defined
        - quay_api_token != ""
        - bob_registry_versions.status != 200

    - name: "Reseting 'versions_in_registry' variable"
      set_fact:
        versions_in_registry: []

    - name: "Setting all versions to 'versions_in_registry' variable"
      set_fact:
        versions_in_registry: "{{ bob_registry_versions.json.tags | sort_versions | regex_replace('v') }}"
      when:
      - bob_registry_versions.status is defined
      - bob_registry_versions.status == 200

    - debug:
        var: bob_prod_registry_versions

    - name: "Setting all versions to 'versions_in_prod_registry' variable"
      set_fact:
        versions_in_prod_registry: "{{ bob_prod_registry_versions.json.tags | sort_versions | regex_replace('v') }}"
      when:
      - bob_prod_registry_versions.status is defined
      - bob_prod_registry_versions.status == 200


    - name: "Filtering versions to add and remove"
      set_fact:
        verions_add: "{{ versions_in_dir | difference(versions_in_registry) | difference(versions_in_prod_registry) }}"
        verions_remove: "{{ versions_in_registry | difference(versions_in_dir) }}"

    - name: "Converting 'operator_version' to list"
      set_fact:
        version_list: "[ '{{ operator_version }}' ]"
      when: operator_version is defined

    - name: "Filtering versions to add and remove for only 'operator_version' : '{{ operator_version }}' specified by user"
      set_fact:
        verions_add: "{{ versions_in_dir | intersect(version_list) }}"
        verions_remove: "{{ versions_in_registry | intersect(version_list) }}"
        versions_in_dir: "{{ versions_in_dir | intersect(version_list) }}"
      when: operator_version is defined

    - name: "Delete all tags from operrator {{ operator_package_name }}. Tags: '{{ verions_remove | join(',') }}'"
      uri:
        url: "{{ registry_api_http_protocol | default('https') }}://quay.io/api/v1/repository/{{ bundle_image_namespace }}/{{ operator_package_name }}/tag/v{{ item }}"
        method: DELETE
        force_basic_auth: yes
        headers:
          Authorization: "Bearer {{ quay_api_token }}"
        status_code: 204
      with_items: "{{ verions_remove }}"
      when:
        - quay_api_token is defined
        - quay_api_token != ""

    - name: "Reset value for unified package test"
      set_fact:
        previous_package: ''

    - name: "Build bundle image"
      include_role:
        name: build_operator_version_bundle
      vars:
        op_version: "{{ op_ver_item }}"
      loop: "{{ verions_add }}"
      loop_control:
        loop_var: op_ver_item

    - name: "Adding current operator to the 'operators_for_index'"
      set_fact:
        operators_for_index: "{{ operators_for_index | default([]) | union( [{'name': operator_package_name, 'versions': versions_in_dir, 'versions_prod': versions_in_prod_registry }]) }}"
      when: verions_add.0 is defined or (index_force_rebuild is defined and index_force_rebuild|bool)

    - name: "Adding current operator to the 'operators_for_index' when only removed version is defined"
      set_fact:
        operators_for_index: "{{ operators_for_index | default([]) | union( [{'name': operator_package_name, 'versions': versions_in_dir, 'versions_prod': versions_in_prod_registry }]) }}"
      when: verions_add.0 is undefined and verions_remove.0 is defined

  when: bob_operator_dir_st.stat.exists